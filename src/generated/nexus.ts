/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PlantWhereUniqueInput: { // input type
    id?: number | null; // Int
  }
  UserCreateInput: { // input type
    createdAt?: any | null; // DateTime
    email: string; // String!
    firstName?: string | null; // String
    id?: string | null; // String
    lastName?: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenEnums {
  Soil: prisma.Soil
  SunExposure: prisma.SunExposure
}

export interface NexusGenRootTypes {
  Mutation: {};
  Plant: prisma.Plant;
  PlantBox: prisma.PlantBox;
  Query: {};
  User: prisma.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  PlantWhereUniqueInput: NexusGenInputs['PlantWhereUniqueInput'];
  UserCreateInput: NexusGenInputs['UserCreateInput'];
  Soil: NexusGenEnums['Soil'];
  SunExposure: NexusGenEnums['SunExposure'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createOneUser: NexusGenRootTypes['User']; // User!
  }
  Plant: { // field return type
    description: string; // String!
    id: number; // Int!
    image: string | null; // String
    name: string; // String!
    plantBox: NexusGenRootTypes['PlantBox'] | null; // PlantBox
    soilTypes: NexusGenEnums['Soil']; // Soil!
    sprayFrequency: number; // Int!
    sunExposure: NexusGenEnums['SunExposure']; // SunExposure!
  }
  PlantBox: { // field return type
    description: string; // String!
    id: number; // Int!
    image: string; // String!
    name: string; // String!
    plants: NexusGenRootTypes['Plant'][]; // [Plant!]!
  }
  Query: { // field return type
    plants: NexusGenRootTypes['Plant'][]; // [Plant!]!
  }
  User: { // field return type
    email: string; // String!
    firstName: string | null; // String
    id: string; // String!
    lastName: string | null; // String
    password: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneUser: { // args
      data: NexusGenInputs['UserCreateInput']; // UserCreateInput!
    }
  }
  PlantBox: {
    plants: { // args
      after?: NexusGenInputs['PlantWhereUniqueInput'] | null; // PlantWhereUniqueInput
      before?: NexusGenInputs['PlantWhereUniqueInput'] | null; // PlantWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
  Query: {
    plants: { // args
      after?: NexusGenInputs['PlantWhereUniqueInput'] | null; // PlantWhereUniqueInput
      before?: NexusGenInputs['PlantWhereUniqueInput'] | null; // PlantWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
      skip?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Plant" | "PlantBox" | "Query" | "User";

export type NexusGenInputNames = "PlantWhereUniqueInput" | "UserCreateInput";

export type NexusGenEnumNames = "Soil" | "SunExposure";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}