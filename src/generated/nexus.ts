/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from "../context"
import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  CardinalPoint: prisma.CardinalPoint
  ShortExposure: prisma.ShortExposure
  Soil: prisma.Soil
  UserRole: prisma.UserRole
}

export interface NexusGenRootTypes {
  AuthResp: { // root type
    success: boolean; // Boolean!
    user: NexusGenRootTypes['User']; // User!
  }
  PaginatedUsers: { // root type
    length: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Plant: prisma.Plant;
  Query: {};
  User: prisma.User;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CardinalPoint: NexusGenEnums['CardinalPoint'];
  ShortExposure: NexusGenEnums['ShortExposure'];
  Soil: NexusGenEnums['Soil'];
  UserRole: NexusGenEnums['UserRole'];
}

export interface NexusGenFieldTypes {
  AuthResp: { // field return type
    success: boolean; // Boolean!
    user: NexusGenRootTypes['User']; // User!
  }
  PaginatedUsers: { // field return type
    length: number; // Int!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Plant: { // field return type
    cardinalPoint: NexusGenEnums['CardinalPoint'][]; // [CardinalPoint!]!
    description: string; // String!
    id: string; // ID!
    image: string | null; // String
    name: string; // String!
    shortExposure: NexusGenEnums['ShortExposure']; // ShortExposure!
    soilTypes: NexusGenEnums['Soil'][]; // [Soil!]!
    sprayFrequency: number; // Int!
  }
  Query: { // field return type
    createPlant: NexusGenRootTypes['Plant']; // Plant!
    deletePlant: NexusGenRootTypes['Plant']; // Plant!
    loginAdminUser: NexusGenRootTypes['AuthResp']; // AuthResp!
    paginatedUsers: NexusGenRootTypes['PaginatedUsers']; // PaginatedUsers!
    updatePlant: NexusGenRootTypes['Plant']; // Plant!
  }
  User: { // field return type
    createdAt: any; // DateTime!
    email: string; // String!
    firstName: string | null; // String
    id: string; // String!
    lastName: string | null; // String
    role: NexusGenEnums['UserRole']; // UserRole!
  }
}

export interface NexusGenArgTypes {
  Query: {
    createPlant: { // args
      cardinalPoint?: NexusGenEnums['CardinalPoint'][] | null; // [CardinalPoint!]
      description: string; // String!
      name: string; // String!
      shortExposure: NexusGenEnums['ShortExposure']; // ShortExposure!
      soilTypes?: NexusGenEnums['Soil'][] | null; // [Soil!]
      sprayFrequency: number; // Int!
    }
    deletePlant: { // args
      id: number; // Int!
    }
    loginAdminUser: { // args
      email: string; // String!
      password: string; // String!
    }
    paginatedUsers: { // args
      limit: number; // Int!
      offset: number; // Int!
      role?: NexusGenEnums['UserRole'] | null; // UserRole
    }
    updatePlant: { // args
      cardinalPoint?: NexusGenEnums['CardinalPoint'][] | null; // [CardinalPoint!]
      description?: string | null; // String
      id: number; // Int!
      name?: string | null; // String
      shortExposure?: NexusGenEnums['ShortExposure'] | null; // ShortExposure
      soilTypes?: NexusGenEnums['Soil'][] | null; // [Soil!]
      sprayFrequency?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthResp" | "PaginatedUsers" | "Plant" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "CardinalPoint" | "ShortExposure" | "Soil" | "UserRole";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}