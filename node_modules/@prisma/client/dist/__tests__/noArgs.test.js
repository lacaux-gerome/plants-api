"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const recommender_1 = require("../fixtures/recommender");
const runtime_1 = require("../runtime");
const getDMMF_1 = require("../runtime/getDMMF");
let dmmf;
describe('no args', () => {
    beforeAll(async () => {
        dmmf = new runtime_1.DMMFClass(await getDMMF_1.getDMMF({ datamodel: recommender_1.recommender }));
    });
    test('findOne', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'query',
            rootField: 'findOneUser',
        });
        expect(() => document.validate(undefined, false, 'user', 'colorless'))
            .toThrowErrorMatchingInlineSnapshot(`
"
Invalid \`prisma.user()\` invocation:

{
+ where: {
+   id?: Int,
+   email?: String
+ }
}

Argument where is missing.

Note: Lines with + are required
"
`);
    });
    test('findMany', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'query',
            rootField: 'findManyUser',
        });
        document.validate(undefined, false, 'user', 'colorless');
        expect(String(document)).toMatchInlineSnapshot(`
      "query {
        findManyUser {
          id
          name
          email
        }
      }"
    `);
    });
    test('findMany', () => {
        const select = {
            where: {
                likedArticles: null,
            },
        };
        const document = runtime_1.makeDocument({
            dmmf,
            select,
            rootTypeName: 'query',
            rootField: 'findManyUser',
        });
        document.validate(select, false, 'user', 'colorless');
        expect(String(document)).toMatchInlineSnapshot(`
      "query {
        findManyUser(where: {

        }) {
          id
          name
          email
        }
      }"
    `);
    });
    test('createOne', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'mutation',
            rootField: 'createOneUser',
        });
        expect(() => document.validate(undefined, false, 'user', 'colorless'))
            .toThrowErrorMatchingInlineSnapshot(`
"
Invalid \`prisma.user()\` invocation:

{
+ data: {
+   id: Int,
+   name: String,
+   email: String,
+   likedArticles?: ArticleCreateManyWithoutLikedByInput,
+   persona: PersonaCreateOneWithoutUsersInput
+ }
}

Argument data is missing.

Note: Lines with + are required
"
`);
    });
    test('deleteMany', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'mutation',
            rootField: 'deleteManyUser',
        });
        document.validate(undefined, false, 'user', 'colorless');
        expect(String(document)).toMatchInlineSnapshot(`
      "mutation {
        deleteManyUser {
          count
        }
      }"
    `);
    });
    test('deleteOne', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'mutation',
            rootField: 'deleteOneUser',
        });
        expect(() => document.validate(undefined, false, 'user', 'colorless'))
            .toThrowErrorMatchingInlineSnapshot(`
"
Invalid \`prisma.user()\` invocation:

{
+ where: {
+   id?: Int,
+   email?: String
+ }
}

Argument where is missing.

Note: Lines with + are required
"
`);
    });
    test('updateMany', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'mutation',
            rootField: 'updateManyUser',
        });
        expect(() => document.validate(undefined, false, 'user', 'colorless'))
            .toThrowErrorMatchingInlineSnapshot(`
"
Invalid \`prisma.user()\` invocation:

{
+ data: {
+   id?: Int,
+   name?: String,
+   email?: String
+ },
? where?: {
?   id?: Int,
?   name?: String,
?   email?: String,
?   likedArticles?: ArticleFilter,
?   AND?: UserWhereInput,
?   OR?: UserWhereInput,
?   NOT?: UserWhereInput,
?   persona?: PersonaWhereInput
? }
}

Argument data is missing.

Note: Lines with + are required, lines with ? are optional.
"
`);
    });
    test('upsertOne', () => {
        const document = runtime_1.makeDocument({
            dmmf,
            select: undefined,
            rootTypeName: 'mutation',
            rootField: 'upsertOneUser',
        });
        expect(() => document.validate(undefined, false, 'user', 'colorless'))
            .toThrowErrorMatchingInlineSnapshot(`
"
Invalid \`prisma.user()\` invocation:

{
+ where: {
+   id?: Int,
+   email?: String
+ },
+ create: {
+   id: Int,
+   name: String,
+   email: String,
+   likedArticles?: ArticleCreateManyWithoutLikedByInput,
+   persona: PersonaCreateOneWithoutUsersInput
+ },
+ update: {
+   id?: Int,
+   name?: String,
+   email?: String,
+   likedArticles?: ArticleUpdateManyWithoutLikedByInput,
+   persona?: PersonaUpdateOneRequiredWithoutUsersInput
+ }
}

Argument where is missing.
Argument create is missing.
Argument update is missing.

Note: Lines with + are required
"
`);
    });
});
//# sourceMappingURL=noArgs.test.js.map