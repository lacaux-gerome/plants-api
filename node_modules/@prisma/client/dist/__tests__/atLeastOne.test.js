"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const enums_1 = require("../fixtures/enums");
const runtime_1 = require("../runtime");
const getDMMF_1 = require("../runtime/getDMMF");
describe('at least one validation', () => {
    let dmmf;
    beforeAll(async () => {
        dmmf = new runtime_1.DMMFClass(await getDMMF_1.getDMMF({ datamodel: enums_1.enums }));
    });
    test('invalid query', () => {
        const select = {
            where: {
                email: {},
            },
        };
        const document = runtime_1.makeDocument({
            dmmf,
            select,
            rootTypeName: 'query',
            rootField: 'findManyUser',
        });
        expect(String(document)).toMatchInlineSnapshot(`
      "query {
        findManyUser(where: {
          email: {

          }
        }) {
          id
          name
          email
          status
          nicknames
          permissions
          favoriteTree
          someFloats
        }
      }"
    `);
        try {
            document.validate(select, false, 'users');
        }
        catch (e) {
            expect(strip_ansi_1.default(e.message)).toMatchInlineSnapshot(`
        "
        Invalid \`prisma.users()\` invocation:

        {
          where: {
            email: {
        ?     equals?: String,
        ?     not?: String | StringFilter,
        ?     in?: String,
        ?     notIn?: String,
        ?     lt?: String,
        ?     lte?: String,
        ?     gt?: String,
        ?     gte?: String,
        ?     contains?: String,
        ?     startsWith?: String,
        ?     endsWith?: String
            }
          }
        }

        Argument where.email of type StringFilter needs at least one argument. Available args are listed in green.

        Note: Lines with ? are optional.
        "
      `);
        }
    });
    test('valid query', () => {
        const select = {
            where: {
                email: '',
            },
        };
        const document = runtime_1.makeDocument({
            dmmf,
            select,
            rootTypeName: 'query',
            rootField: 'findManyUser',
        });
        expect(String(document)).toMatchSnapshot();
        expect(() => document.validate(select, false, 'users')).not.toThrow();
    });
});
//# sourceMappingURL=atLeastOne.test.js.map